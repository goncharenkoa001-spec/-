// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –±–ª–æ–≥–∞

class BlogAdmin {
    constructor() {
        this.posts = JSON.parse(localStorage.getItem('blogPosts')) || [];
        this.currentEditId = null;
        this.init();
    }

    init() {
        this.loadPosts();
        this.setupEventListeners();
        this.updateFormState();
    }

    setupEventListeners() {
        document.getElementById('post-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.savePost();
        });
    }

    savePost() {
        const title = document.getElementById('post-title').value;
        const date = document.getElementById('post-date').value;
        const preview = document.getElementById('post-preview').value;
        const content = document.getElementById('post-content').value;
        
        // –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        const previewImage = document.getElementById('post-preview-image').value;
        const images = document.getElementById('post-images').value.split('\n').filter(url => url.trim());
        const videos = document.getElementById('post-videos').value.split('\n').filter(url => url.trim());
        const audios = document.getElementById('post-audios').value.split('\n').filter(url => url.trim());

        if (!title || !date || !preview || !content || !previewImage) {
            this.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }

        const postData = {
            id: this.currentEditId || Date.now().toString(),
            title,
            date: this.formatDate(date),
            preview,
            content,
            previewImage: previewImage.trim(),
            images: images.map(url => url.trim()),
            videos: videos.map(url => url.trim()),
            audios: audios.map(url => url.trim()),
            createdAt: this.currentEditId ? 
                (this.posts.find(p => p.id === this.currentEditId)?.createdAt || new Date().toISOString()) : 
                new Date().toISOString()
        };

        if (this.currentEditId) {
            // –û–ë–ù–û–í–õ–ï–ù–ò–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
            const index = this.posts.findIndex(p => p.id === this.currentEditId);
            if (index !== -1) {
                this.posts[index] = postData;
                this.showAlert('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
            }
        } else {
            // –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            this.posts.unshift(postData);
            this.showAlert('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!', 'success');
        }

        this.saveToStorage();
        this.loadPosts();
        this.resetForm();
        this.currentEditId = null;
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        const options = { day: 'numeric', month: 'long', year: 'numeric' };
        return date.toLocaleDateString('ru-RU', options);
    }

    loadPosts() {
        const postsList = document.getElementById('posts-list');
        postsList.innerHTML = '';

        if (this.posts.length === 0) {
            postsList.innerHTML = '<p style="color: #7f91a4; text-align: center;">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</p>';
            return;
        }

        this.posts.forEach(post => {
            const postElement = this.createPostElement(post);
            postsList.appendChild(postElement);
        });
    }

    createPostElement(post) {
        const div = document.createElement('div');
        div.className = 'post-item';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫—É (—Å—Ç–∞—Ä—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        const previewImage = post.previewImage || post.image || '–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        const mediaCount = (post.images ? post.images.length : 0) + 
                          (post.videos ? post.videos.length : 0) + 
                          (post.audios ? post.audios.length : 0);
        
        div.innerHTML = `
            <div class="post-header">
                <h3 class="post-title">${post.title}</h3>
                <span class="post-date">${post.date}</span>
            </div>
            <p style="color: #c5c5c5; margin-bottom: 0.5rem;">${post.preview.substring(0, 100)}...</p>
            <div style="margin: 0.5rem 0;">
                <small style="color: #7f91a4;">
                    üì∑ –ü—Ä–µ–≤—å—é: ${previewImage.split('/').pop()}<br>
                    üìÅ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: ${mediaCount}
                </small>
            </div>
            <div class="post-actions">
                <button onclick="admin.editPost('${post.id}')" class="btn">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="admin.deletePost('${post.id}')" class="btn btn-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                <button onclick="admin.viewPost('${post.id}')" class="btn">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
            </div>
        `;
        return div;
    }

    editPost(id) {
        const post = this.posts.find(p => p.id === id);
        if (!post) return;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞
        document.getElementById('post-title').value = post.title;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        const dateParts = post.date.split(' ');
        const months = {
            '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
            '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
            '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
        };
        const formattedDate = `${dateParts[2]}-${months[dateParts[1]]}-${dateParts[0].padStart(2, '0')}`;
        
        document.getElementById('post-date').value = formattedDate;
        document.getElementById('post-preview').value = post.preview;
        document.getElementById('post-content').value = post.content;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        document.getElementById('post-preview-image').value = post.previewImage || '';
        document.getElementById('post-images').value = post.images ? post.images.join('\n') : '';
        document.getElementById('post-videos').value = post.videos ? post.videos.join('\n') : '';
        document.getElementById('post-audios').value = post.audios ? post.audios.join('\n') : '';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        updateMediaPreview('post-preview-image', post.previewImage || '');
        updateMediaPreview('post-images', post.images || []);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
        const today = new Date().toISOString().split('T')[0];
        if (formattedDate === today) {
            document.getElementById('current-date-display').textContent = '–°–µ–≥–æ–¥–Ω—è';
        } else {
            document.getElementById('current-date-display').textContent = '–í—ã–±—Ä–∞–Ω–∞';
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.currentEditId = id;
        this.updateFormState();
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ
        document.getElementById('new-post').scrollIntoView({ behavior: 'smooth' });
        this.showAlert(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: "${post.title}"`, 'success');
    }

    updateFormState() {
        const submitBtn = document.getElementById('submit-btn');
        const cancelBtn = document.getElementById('cancel-edit-btn');
        
        if (this.currentEditId) {
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            submitBtn.textContent = 'üíæ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç';
            submitBtn.style.background = '#27ae60';
            cancelBtn.classList.remove('hidden');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–æ—Å—Ç–µ
            const post = this.posts.find(p => p.id === this.currentEditId);
            if (post) {
                document.querySelector('#new-post h2').innerHTML = 
                    `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: <span style="color: #5682a3;">"${post.title}"</span>`;
            }
        } else {
            // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
            submitBtn.textContent = 'üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç';
            submitBtn.style.background = '';
            cancelBtn.classList.add('hidden');
            document.querySelector('#new-post h2').textContent = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç';
        }
    }

    cancelEdit() {
        if (confirm('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            this.resetForm();
            this.showAlert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', 'success');
        }
    }

    deletePost(id) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) {
            this.posts = this.posts.filter(p => p.id !== id);
            this.saveToStorage();
            this.loadPosts();
            
            // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø–æ—Å—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            if (this.currentEditId === id) {
                this.resetForm();
            }
            
            this.showAlert('üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω', 'success');
        }
    }

    viewPost(id) {
        const post = this.posts.find(p => p.id === id);
        if (post) {
            localStorage.setItem('currentViewPost', JSON.stringify(post));
            window.open('post-view.html', '_blank');
        }
    }

    resetForm() {
        document.getElementById('post-form').reset();
        setTodayDate();
        this.currentEditId = null;
        this.updateFormState();
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –º–µ–¥–∏–∞
        document.getElementById('post-images').value = '';
        document.getElementById('post-videos').value = '';
        document.getElementById('post-audios').value = '';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        document.getElementById('preview-image-preview').classList.add('hidden');
        document.getElementById('images-preview').classList.add('hidden');
        document.getElementById('videos-preview').classList.add('hidden');
        document.getElementById('audios-preview').classList.add('hidden');
    }

    saveToStorage() {
        localStorage.setItem('blogPosts', JSON.stringify(this.posts));
    }

    clearAllPosts() {
        if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ—Å—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            this.posts = [];
            this.saveToStorage();
            this.loadPosts();
            this.resetForm();
            this.showAlert('üóëÔ∏è –í—Å–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã', 'success');
        }
    }

    convertOldPosts() {
        const oldPosts = JSON.parse(localStorage.getItem('blogPosts')) || [];
        let convertedCount = 0;
        
        const newPosts = oldPosts.map(post => {
            if (post.previewImage !== undefined) {
                return post;
            }
            
            convertedCount++;
            return {
                ...post,
                previewImage: post.image || '',
                images: post.image ? [post.image] : [],
                videos: [],
                audios: []
            };
        });
        
        this.posts = newPosts;
        this.saveToStorage();
        this.loadPosts();
        
        this.showAlert(
            `üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedCount} –ø–æ—Å—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç`, 
            'success'
        );
    }

    showAlert(message, type) {
        const alert = document.getElementById('alert');
        alert.textContent = message;
        alert.className = `alert alert-${type}`;
        alert.classList.remove('hidden');

        setTimeout(() => {
            alert.classList.add('hidden');
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const admin = new BlogAdmin();